// This test file is marked invalid as it contains compilation errors. Change the extension to of this file to .java, to manually edit its contents


// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model 

ROOST_METHOD_HASH=of_eb8138c6bc
ROOST_METHOD_SIG_HASH=of_7a04d5363c

"""
Scenario 1: Valid input parameters

Details:  
  TestName: testValidInputParameters
  Description: This test is meant to check if the method correctly creates and returns a new Job object when valid input parameters are provided.
Execution:
  Arrange: Create a jobName, processingTime, and deadline with valid values.
  Act: Invoke the of method with these parameters.
  Assert: Use JUnit assertions to verify if the returned Job object has the correct jobName, processingTime, and deadline.
Validation: 
  This assertion verifies that the method correctly creates and returns a Job object when valid input parameters are provided. This is significant as it ensures the core functionality of the method works as expected.

Scenario 2: Null job name

Details:  
  TestName: testNullJobName
  Description: This test is meant to check how the method behaves when a null jobName is provided.
Execution:
  Arrange: Create a null jobName, and any processingTime and deadline.
  Act: Invoke the of method with these parameters.
  Assert: Use JUnit assertions to verify if an exception is thrown.
Validation: 
  This assertion verifies that the method throws an exception when a null jobName is provided. This is significant as it ensures the method can handle invalid inputs.

Scenario 3: Negative processing time

Details:  
  TestName: testNegativeProcessingTime
  Description: This test is meant to check how the method behaves when a negative processingTime is provided.
Execution:
  Arrange: Create a jobName, and a negative processingTime and any deadline.
  Act: Invoke the of method with these parameters.
  Assert: Use JUnit assertions to verify if an exception is thrown.
Validation: 
  This assertion verifies that the method throws an exception when a negative processingTime is provided. This is significant as it ensures the method can handle invalid inputs.

Scenario 4: Negative deadline

Details:  
  TestName: testNegativeDeadline
  Description: This test is meant to check how the method behaves when a negative deadline is provided.
Execution:
  Arrange: Create a jobName, processingTime, and a negative deadline.
  Act: Invoke the of method with these parameters.
  Assert: Use JUnit assertions to verify if an exception is thrown.
Validation: 
  This assertion verifies that the method throws an exception when a negative deadline is provided. This is significant as it ensures the method can handle invalid inputs.
"""
*/

// ********RoostGPT********
package org.openapitools.api;import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import org.springframework.web.context.request.NativeWebRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class ApiUtilOfTest {
    
    @Test
    @Tag("valid")
    public void testValidInputParameters() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = 10;
        Job result = ApiUtil.of(jobName, processingTime, deadline);
        Assertions.assertNotNull(result);
        Assertions.assertEquals(jobName, result.getJobName());
        Assertions.assertEquals(processingTime, result.getProcessingTime());
        Assertions.assertEquals(deadline, result.getDeadline());
    }
    @Test
    @Tag("invalid")
    public void testNullJobName() {
        String jobName = null;
        int processingTime = 5;
        int deadline = 10;
        Assertions.assertThrows(NullPointerException.class, () -> {
            ApiUtil.of(jobName, processingTime, deadline);
        });
    }
    @Test
    @Tag("invalid")
    public void testNegativeProcessingTime() {
        String jobName = "Job1";
        int processingTime = -5;
        int deadline = 10;
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            ApiUtil.of(jobName, processingTime, deadline);
        });
    }
    @Test
    @Tag("invalid")
    public void testNegativeDeadline() {
        String jobName = "Job1";
        int processingTime = 5;
        int deadline = -10;
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            ApiUtil.of(jobName, processingTime, deadline);
        });
    }
}