
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_082a9e7881
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
Scenario 1: Test Equals Method with Same Object Reference

Details:
    TestName: testEqualsWithSameObjectReference
    Description: This test is meant to check if the equals method returns true when the same object reference is passed.
Execution:
    Arrange: Create a CredentialsObscuredGet200Response object.
    Act: Invoke the equals method, passing the reference to the same object.
    Assert: Assert that the result is true.
Validation:
    The equals method should return true when the same object reference is passed, as per the implementation. This test will validate if the equality check is working as expected when the same object reference is passed.

Scenario 2: Test Equals Method with Different Class Object

Details:
    TestName: testEqualsWithDifferentClassObject
    Description: This test is meant to check if the equals method returns false when an object of a different class is passed.
Execution:
    Arrange: Create an object of a different class.
    Act: Invoke the equals method, passing the reference to the different class object.
    Assert: Assert that the result is false.
Validation:
    The equals method should return false when an object of a different class is passed, as per the implementation. This test will validate if the equality check is working as expected when a different class object is passed.

Scenario 3: Test Equals Method with Null

Details:
    TestName: testEqualsWithNull
    Description: This test is meant to check if the equals method returns false when null is passed.
Execution:
    Arrange: No arrangement needed.
    Act: Invoke the equals method, passing null.
    Assert: Assert that the result is false.
Validation:
    The equals method should return false when null is passed, as per the implementation. This test will validate if the equality check is working as expected when null is passed.

Scenario 4: Test Equals Method with Same Object Values

Details:
    TestName: testEqualsWithSameObjectValues
    Description: This test is meant to check if the equals method returns true when an object with the same values is passed.
Execution:
    Arrange: Create two CredentialsObscuredGet200Response objects with the same obscured value.
    Act: Invoke the equals method, passing the reference to the second object.
    Assert: Assert that the result is true.
Validation:
    The equals method should return true when an object with the same values is passed, as per the implementation. This test will validate if the equality check is working as expected when an object with the same values is passed.

Scenario 5: Test Equals Method with Different Object Values

Details:
    TestName: testEqualsWithDifferentObjectValues
    Description: This test is meant to check if the equals method returns false when an object with different values is passed.
Execution:
    Arrange: Create two CredentialsObscuredGet200Response objects with different obscured values.
    Act: Invoke the equals method, passing the reference to the second object.
    Assert: Assert that the result is false.
Validation:
    The equals method should return false when an object with different values is passed, as per the implementation. This test will validate if the equality check is working as expected when an object with different values is passed.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseEqualsTest {

	@Test
	@Tag("valid")
	void testEqualsWithSameObjectReference() {
		// Arrange
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		// Act & Assert
		assertTrue(response.equals(response));
	}

	@Test
	@Tag("invalid")
	void testEqualsWithDifferentClassObject() {
		// Arrange
		Object obj = new Object();
		// Act & Assert
		assertFalse(new CredentialsObscuredGet200Response().equals(obj));
	}

	@Test
	@Tag("invalid")
	void testEqualsWithNull() {
		// Act & Assert
		assertFalse(new CredentialsObscuredGet200Response().equals(null));
	}

	@Test
	@Tag("valid")
	void testEqualsWithSameObjectValues() {
		// Arrange
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(true);
		// Act & Assert
		assertTrue(response1.equals(response2));
	}

	@Test
	@Tag("invalid")
	void testEqualsWithDifferentObjectValues() {
		// Arrange
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(false);
		// Act & Assert
		assertFalse(response1.equals(response2));
	}

}