
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_082a9e7881
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
  Scenario 1: Test to check if the equals method correctly identifies two identical objects

  Details:
    TestName: equalsIdenticalObjects
    Description: This test is meant to check that the equals method correctly identifies two objects that are exactly the same.
  Execution:
    Arrange: Create two CredentialsObscuredGet200Response objects with the same obscured value.
    Act: Compare the two objects using the equals method.
    Assert: Assert that the equals method returns true.
  Validation:
    The equals method is expected to return true when comparing two objects that are identical. This test verifies that this behavior is correctly implemented in the method.

  Scenario 2: Test to check if the equals method correctly identifies two different objects

  Details:
    TestName: equalsDifferentObjects
    Description: This test is meant to check that the equals method correctly identifies two objects that are different.
  Execution:
    Arrange: Create two CredentialsObscuredGet200Response objects with different obscured values.
    Act: Compare the two objects using the equals method.
    Assert: Assert that the equals method returns false.
  Validation:
    The equals method is expected to return false when comparing two objects that are different. This test verifies that this behavior is correctly implemented in the method.

  Scenario 3: Test to check if the equals method correctly handles null objects

  Details:
    TestName: equalsNullObject
    Description: This test is meant to check that the equals method correctly handles null objects.
  Execution:
    Arrange: Create a CredentialsObscuredGet200Response object and a null object.
    Act: Compare the two objects using the equals method.
    Assert: Assert that the equals method returns false.
  Validation:
    The equals method is expected to return false when comparing an object with a null object. This test verifies that this behavior is correctly implemented in the method.

  Scenario 4: Test to check if the equals method correctly identifies an object compared to itself

  Details:
    TestName: equalsSameObject
    Description: This test is meant to check that the equals method correctly identifies an object compared to itself.
  Execution:
    Arrange: Create a CredentialsObscuredGet200Response object.
    Act: Compare the object with itself using the equals method.
    Assert: Assert that the equals method returns true.
  Validation:
    The equals method is expected to return true when an object is compared to itself. This test verifies that this behavior is correctly implemented in the method.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class CredentialsObscuredGet200ResponseEqualsTest {

	@Test
	@Tag("valid")
	public void equalsIdenticalObjects() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(true);
		assertTrue(response1.equals(response2));
	}

	@Test
	@Tag("invalid")
	public void equalsDifferentObjects() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(false);
		assertFalse(response1.equals(response2));
	}

	@Test
	@Tag("invalid")
	public void equalsNullObject() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		assertFalse(response1.equals(null));
	}

	@Test
	@Tag("valid")
	public void equalsSameObject() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		assertTrue(response1.equals(response1));
	}

}