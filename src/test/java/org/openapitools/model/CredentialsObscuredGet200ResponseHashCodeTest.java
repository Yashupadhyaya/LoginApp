
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=hashCode_4eab0d4f68
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

"""
Scenario 1: Testing hashCode method when obscured is true

Details:
  TestName: testHashCodeWhenObscuredIsTrue
  Description: This test is meant to check the hashCode method when the obscured property is true.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response and set obscured to true.
  Act: Invoke the hashCode method on the instance.
  Assert: Use JUnit assertions to check if the returned hash code matches the hash code of true.
Validation:
  The assertion aims to verify that the hashCode method correctly computes the hash code when obscured is true. This is important for ensuring that the hashCode method works as expected, which is crucial for the correct functioning of hash-based collections.

Scenario 2: Testing hashCode method when obscured is false

Details:
  TestName: testHashCodeWhenObscuredIsFalse
  Description: This test is meant to check the hashCode method when the obscured property is false.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response and set obscured to false.
  Act: Invoke the hashCode method on the instance.
  Assert: Use JUnit assertions to check if the returned hash code matches the hash code of false.
Validation:
  The assertion aims to verify that the hashCode method correctly computes the hash code when obscured is false. This is important for ensuring that the hashCode method works as expected, which is crucial for the correct functioning of hash-based collections.

Scenario 3: Testing hashCode method when obscured is null

Details:
  TestName: testHashCodeWhenObscuredIsNull
  Description: This test is meant to check the hashCode method when the obscured property is null.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response and set obscured to null.
  Act: Invoke the hashCode method on the instance.
  Assert: Use JUnit assertions to check if the returned hash code matches the hash code of null.
Validation:
  The assertion aims to verify that the hashCode method correctly computes the hash code when obscured is null. This is important for ensuring that the hashCode method works as expected, which is crucial for the correct functioning of hash-based collections.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class CredentialsObscuredGet200ResponseHashCodeTest {

	@Test
	@Tag("valid")
	public void testHashCodeWhenObscuredIsTrue() {
		// Arrange
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(true);
		// Act
		int hashCode = response.hashCode();
		// Assert
		assertEquals(Boolean.TRUE.hashCode(), hashCode,
				"Hash code does not match expected value when obscured is true");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWhenObscuredIsFalse() {
		// Arrange
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(false);
		// Act
		int hashCode = response.hashCode();
		// Assert
		assertEquals(Boolean.FALSE.hashCode(), hashCode,
				"Hash code does not match expected value when obscured is false");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWhenObscuredIsNull() {
		// Arrange
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(null);
		// Act
		int hashCode = response.hashCode();
		// Assert
		assertEquals(0, hashCode, "Hash code does not match expected value when obscured is null");
	}

}