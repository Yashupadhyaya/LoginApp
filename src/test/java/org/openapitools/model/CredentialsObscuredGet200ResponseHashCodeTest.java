
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=hashCode_4eab0d4f68
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

"""
Scenario 1: Testing hashCode method with same object
TestName: testHashCodeWithSameObject
Description: This test is meant to check the hashCode method when the same object is used.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response and set 'obscured' to true.
  Act: Invoke the hashCode method on the created object.
  Assert: Assert that the hashCode result is equal to the hashCode of the same object.
Validation:
  The assertion aims to verify that the hashCode method returns the same hash code for the same object. This is important as per the contract of the hashCode method - it should return the same integer whenever it is invoked on the same object during an execution of a Java application.

Scenario 2: Testing hashCode method with different objects having same 'obscured' value
TestName: testHashCodeWithDifferentObjectsSameValue
Description: This test is meant to check the hashCode method when different objects having same 'obscured' value are used.
Execution:
  Arrange: Create two different instances of CredentialsObscuredGet200Response and set 'obscured' to true for both.
  Act: Invoke the hashCode method on the both objects.
  Assert: Assert that the hashCode results are equal.
Validation:
  The assertion aims to verify that the hashCode method returns the same hash code for different objects having same 'obscured' value. This is significant as per the contract of the hashCode method - if two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.

Scenario 3: Testing hashCode method with different objects having different 'obscured' values
TestName: testHashCodeWithDifferentObjectsDifferentValues
Description: This test is meant to check the hashCode method when different objects having different 'obscured' values are used.
Execution:
  Arrange: Create two different instances of CredentialsObscuredGet200Response, set 'obscured' to true for one and false for the other.
  Act: Invoke the hashCode method on the both objects.
  Assert: Assert that the hashCode results are not equal.
Validation:
  The assertion aims to verify that the hashCode method does not return the same hash code for objects with different 'obscured' values. This is crucial to ensure that the hashCode method is working as expected, providing different results for non-equal objects.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseHashCodeTest {

	@Test
	@Tag("valid")
	public void testHashCodeWithSameObject() {
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(true);
		int hashCode1 = response.hashCode();
		int hashCode2 = response.hashCode();
		assertEquals(hashCode1, hashCode2, "Hash codes of the same object should be equal");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWithDifferentObjectsSameValue() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		int hashCode1 = response1.hashCode();
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(true);
		int hashCode2 = response2.hashCode();
		assertEquals(hashCode1, hashCode2, "Hash codes of different objects with same value should be equal");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWithDifferentObjectsDifferentValues() {
		CredentialsObscuredGet200Response response1 = new CredentialsObscuredGet200Response();
		response1.setObscured(true);
		int hashCode1 = response1.hashCode();
		CredentialsObscuredGet200Response response2 = new CredentialsObscuredGet200Response();
		response2.setObscured(false);
		int hashCode2 = response2.hashCode();
		assertNotEquals(hashCode1, hashCode2,
				"Hash codes of different objects with different values should not be equal");
	}

}