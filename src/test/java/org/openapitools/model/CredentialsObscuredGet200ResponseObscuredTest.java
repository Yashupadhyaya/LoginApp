
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=obscured_4ae41e6cc1
ROOST_METHOD_SIG_HASH=obscured_5bb44ad197

"""
Scenario 1: Testing the obscured method with a true value.

Details:
  TestName: testObscuredWithTrueValue.
  Description: This test is meant to check if the obscured method correctly sets the obscured field to true and returns the correct instance.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with the parameter as true.
  Assert: Use JUnit assertions to compare the returned instance against the original instance and check if the obscured field is set to true.
Validation:
  The assertion aims to verify that the obscured method correctly sets the obscured field to true and returns the correct instance. This is important to ensure that the obscured field is correctly set and the method behaves as expected.

Scenario 2: Testing the obscured method with a false value.

Details:
  TestName: testObscuredWithFalseValue.
  Description: This test is meant to check if the obscured method correctly sets the obscured field to false and returns the correct instance.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with the parameter as false.
  Assert: Use JUnit assertions to compare the returned instance against the original instance and check if the obscured field is set to false.
Validation:
  The assertion aims to verify that the obscured method correctly sets the obscured field to false and returns the correct instance. This is important to ensure that the obscured field is correctly set and the method behaves as expected.

Scenario 3: Testing the obscured method with a null value.

Details:
  TestName: testObscuredWithNullValue.
  Description: This test is meant to check if the obscured method correctly handles a null value and sets the obscured field to null.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with the parameter as null.
  Assert: Use JUnit assertions to compare the returned instance against the original instance and check if the obscured field is set to null.
Validation:
  The assertion aims to verify that the obscured method correctly handles a null value and sets the obscured field to null. This is important to ensure that the method can handle null values without throwing exceptions.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class CredentialsObscuredGet200ResponseObscuredTest {

	@Test
	@Tag("valid")
	void testObscuredWithTrueValue() {
		// Arrange
		CredentialsObscuredGet200Response testInstance = new CredentialsObscuredGet200Response();
		// Act
		CredentialsObscuredGet200Response resultInstance = testInstance.obscured(true);
		// Assert
		assertSame(testInstance, resultInstance);
		assertTrue(resultInstance.getObscured());
	}

	@Test
	@Tag("valid")
	void testObscuredWithFalseValue() {
		// Arrange
		CredentialsObscuredGet200Response testInstance = new CredentialsObscuredGet200Response();
		// Act
		CredentialsObscuredGet200Response resultInstance = testInstance.obscured(false);
		// Assert
		assertSame(testInstance, resultInstance);
		assertFalse(resultInstance.getObscured());
	}

	@Test
	@Tag("boundary")
	void testObscuredWithNullValue() {
		// Arrange
		CredentialsObscuredGet200Response testInstance = new CredentialsObscuredGet200Response();
		// Act
		CredentialsObscuredGet200Response resultInstance = testInstance.obscured(null);
		// Assert
		assertSame(testInstance, resultInstance);
		assertNull(resultInstance.getObscured());
	}

}