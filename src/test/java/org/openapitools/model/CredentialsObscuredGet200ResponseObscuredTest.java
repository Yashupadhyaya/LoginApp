
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=obscured_4ae41e6cc1
ROOST_METHOD_SIG_HASH=obscured_5bb44ad197

"""
Scenario 1: Test the obscured method with a true value.

Details:
  TestName: testObscuredWithTrueValue.
  Description: This test is meant to check if the obscured method correctly sets the obscured field to true and returns the correct instance.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with a true value.
  Assert: Use JUnit assertions to check if the obscured field is set to true and the returned instance is correct.
Validation:
  The assertion verifies that the obscured method correctly sets the obscured field and returns the correct instance. This is crucial to ensure that the CredentialsObscuredGet200Response object is correctly initialized and returned.

Scenario 2: Test the obscured method with a false value.

Details:
  TestName: testObscuredWithFalseValue.
  Description: This test is meant to check if the obscured method correctly sets the obscured field to false and returns the correct instance.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with a false value.
  Assert: Use JUnit assertions to check if the obscured field is set to false and the returned instance is correct.
Validation:
  The assertion verifies that the obscured method correctly sets the obscured field and returns the correct instance. This is crucial to ensure that the CredentialsObscuredGet200Response object is correctly initialized and returned.

Scenario 3: Test the obscured method with a null value.

Details:
  TestName: testObscuredWithNullValue.
  Description: This test is meant to check if the obscured method correctly handles a null value and does not throw an exception.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response.
  Act: Invoke the obscured method with a null value.
  Assert: Use JUnit assertions to check if the obscured field is set to null and the returned instance is correct.
Validation:
  The assertion verifies that the obscured method correctly handles null values. This is crucial to ensure that the CredentialsObscuredGet200Response object is correctly initialized and returned even when null values are passed.

Scenario 4: Test the obscured method when the obscured field is already set.

Details:
  TestName: testObscuredWhenFieldAlreadySet.
  Description: This test is meant to check if the obscured method correctly updates the obscured field when it's already set.
Execution:
  Arrange: Create an instance of CredentialsObscuredGet200Response and set the obscured field.
  Act: Invoke the obscured method with a different value.
  Assert: Use JUnit assertions to check if the obscured field is updated and the returned instance is correct.
Validation:
  The assertion verifies that the obscured method correctly updates the obscured field. This is crucial to ensure that the CredentialsObscuredGet200Response object can be correctly updated.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class CredentialsObscuredGet200ResponseObscuredTest {

	private CredentialsObscuredGet200Response credentialsObscuredGet200Response;

	@BeforeEach
	public void setup() {
		credentialsObscuredGet200Response = new CredentialsObscuredGet200Response();
	}

	@Test
	@Tag("valid")
	public void testObscuredWithTrueValue() {
		CredentialsObscuredGet200Response result = credentialsObscuredGet200Response.obscured(true);
		assertEquals(true, result.getObscured());
		assertEquals(credentialsObscuredGet200Response, result);
	}

	@Test
	@Tag("valid")
	public void testObscuredWithFalseValue() {
		CredentialsObscuredGet200Response result = credentialsObscuredGet200Response.obscured(false);
		assertEquals(false, result.getObscured());
		assertEquals(credentialsObscuredGet200Response, result);
	}

	@Test
	@Tag("valid")
	public void testObscuredWithNullValue() {
		CredentialsObscuredGet200Response result = credentialsObscuredGet200Response.obscured(null);
		assertNull(result.getObscured());
		assertEquals(credentialsObscuredGet200Response, result);
	}

	@Test
	@Tag("valid")
	public void testObscuredWhenFieldAlreadySet() {
		credentialsObscuredGet200Response.obscured(true);
		CredentialsObscuredGet200Response result = credentialsObscuredGet200Response.obscured(false);
		assertEquals(false, result.getObscured());
		assertEquals(credentialsObscuredGet200Response, result);
	}

}