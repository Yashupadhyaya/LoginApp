
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=toString_3eeb15b3bc
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
Scenario 1: Testing the toString method when the obscured value is null
Details:
  TestName: testToStringWhenObscuredIsNull
  Description: This test is meant to check the functionality of the toString method when the obscured value is null.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and do not set the obscured value.
  Act: Invoke the toString method on the created object.
  Assert: Assert that the returned string correctly represents the state of the object and includes "obscured: null".
Validation:
  The assertion verifies that the toString method is correctly handling null values. The expected result is based on the implementation of the toIndentedString method, which should return the string "null" for null inputs. This test is significant because it checks the correct handling of null values, which is a common edge case.

Scenario 2: Testing the toString method when the obscured value is true
Details:
  TestName: testToStringWhenObscuredIsTrue
  Description: This test is meant to check the functionality of the toString method when the obscured value is true.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and set the obscured value to true.
  Act: Invoke the toString method on the created object.
  Assert: Assert that the returned string correctly represents the state of the object and includes "obscured: true".
Validation:
  The assertion verifies that the toString method is correctly representing the state of the object when the obscured value is true. The expected result is based on the implementation of the toString and toIndentedString methods. This test is significant because it checks the correct handling of boolean values, ensuring that the toString method is functioning correctly.

Scenario 3: Testing the toString method when the obscured value is false
Details:
  TestName: testToStringWhenObscuredIsFalse
  Description: This test is meant to check the functionality of the toString method when the obscured value is false.
Execution:
  Arrange: Create a CredentialsObscuredGet200Response object and set the obscured value to false.
  Act: Invoke the toString method on the created object.
  Assert: Assert that the returned string correctly represents the state of the object and includes "obscured: false".
Validation:
  The assertion verifies that the toString method is correctly representing the state of the object when the obscured value is false. The expected result is based on the implementation of the toString and toIndentedString methods. This test is significant because it checks the correct handling of boolean values, ensuring that the toString method is functioning correctly.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class CredentialsObscuredGet200ResponseToStringTest {

	@Test
	@Tag("valid")
	public void testToStringWhenObscuredIsNull() {
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(null);
		String actual = response.toString();
		assertTrue(actual.contains("obscured: null"));
	}

	@Test
	@Tag("valid")
	public void testToStringWhenObscuredIsTrue() {
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(true);
		String actual = response.toString();
		assertTrue(actual.contains("obscured: true"));
	}

	@Test
	@Tag("valid")
	public void testToStringWhenObscuredIsFalse() {
		CredentialsObscuredGet200Response response = new CredentialsObscuredGet200Response();
		response.setObscured(false);
		String actual = response.toString();
		assertTrue(actual.contains("obscured: false"));
	}

}