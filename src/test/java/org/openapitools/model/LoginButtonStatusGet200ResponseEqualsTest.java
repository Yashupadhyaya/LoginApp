
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_c359bb3fac
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
Scenario 1: Validate equal method when objects are exactly the same
Details:
  TestName: validateEqualsMethodWithSameObjects
  Description: This test is meant to check the equals method when the same object is compared with itself.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response.
  Act: Invoke the equals method, passing the same object as an argument.
  Assert: Assert that the equals method returns true.
Validation:
  The assertion verifies that the equals method correctly identifies that the same object is equal to itself. This is crucial in maintaining the integrity of the data model and ensuring correct application behavior.

Scenario 2: Validate equal method when objects are different
Details:
  TestName: validateEqualsMethodWithDifferentObjects
  Description: This test is meant to check the equals method when two different objects are compared.
Execution:
  Arrange: Create two instances of LoginButtonStatusGet200Response with different status values.
  Act: Invoke the equals method, passing the second object as an argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies that different objects are not equal. This is important to ensure the correct identification of unique objects.

Scenario 3: Validate equal method with null object
Details:
  TestName: validateEqualsMethodWithNullObject
  Description: This test is meant to check the equals method when a null object is compared.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response.
  Act: Invoke the equals method, passing null as an argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies that an object is not equal to null. This is important for avoiding null pointer exceptions and ensuring robust application behavior.

Scenario 4: Validate equal method with objects of different classes
Details:
  TestName: validateEqualsMethodWithDifferentClassObject
  Description: This test is meant to check the equals method when an object of a different class is compared.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response and an instance of a different class.
  Act: Invoke the equals method, passing the object of a different class as an argument.
  Assert: Assert that the equals method returns false.
Validation:
  The assertion verifies that the equals method correctly identifies that an object of a different class is not equal. This is important for ensuring type safety and correct application behavior.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class LoginButtonStatusGet200ResponseEqualsTest {

	@Test
	@Tag("valid")
	public void validateEqualsMethodWithSameObjects() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		response1.setStatus("Active");
		assertEquals(response1, response1);
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithDifferentObjects() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		response1.setStatus("Active");
		LoginButtonStatusGet200Response response2 = new LoginButtonStatusGet200Response();
		response2.setStatus("Inactive");
		assertNotEquals(response1, response2);
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithNullObject() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		response1.setStatus("Active");
		assertNotEquals(response1, null);
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithDifferentClassObject() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		response1.setStatus("Active");
		String response2 = "DifferentClassObject";
		assertNotEquals(response1, response2);
	}

}