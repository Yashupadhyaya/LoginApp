
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=equals_c359bb3fac
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
Scenario 1: Validate equal method when objects are exactly the same
Details:
  TestName: validateEqualsMethodWithSameObjects
  Description: This test is to validate the equals method when the objects being compared are exactly the same.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response.
  Act: Compare the instance with itself using the equals method.
  Assert: Assert that the equals method returns true.
Validation:
  The equals method should return true when comparing an object with itself. This is important to ensure the correct behavior of the equals method.

Scenario 2: Validate equal method when objects are null
Details:
  TestName: validateEqualsMethodWithNullObject
  Description: This test is to validate the equals method when the object being compared is null.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response.
  Act: Compare the instance with null using the equals method.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when comparing an object with null. This is important to ensure the correct behavior of the equals method.

Scenario 3: Validate equal method with different class objects
Details:
  TestName: validateEqualsMethodWithDifferentClassObject
  Description: This test is to validate the equals method when the object being compared is of a different class.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response and an instance of another class.
  Act: Compare the LoginButtonStatusGet200Response instance with the other class instance using the equals method.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when comparing objects of different classes. This is important to ensure the correct behavior of the equals method.

Scenario 4: Validate equal method with objects having the same status
Details:
  TestName: validateEqualsMethodWithSameStatusObjects
  Description: This test is to validate the equals method when the objects being compared have the same status.
Execution:
  Arrange: Create two instances of LoginButtonStatusGet200Response with the same status.
  Act: Compare the two instances using the equals method.
  Assert: Assert that the equals method returns true.
Validation:
  The equals method should return true when comparing objects with the same status. This is important to ensure the correct behavior of the equals method.

Scenario 5: Validate equal method with objects having different status
Details:
  TestName: validateEqualsMethodWithDifferentStatusObjects
  Description: This test is to validate the equals method when the objects being compared have different status.
Execution:
  Arrange: Create two instances of LoginButtonStatusGet200Response with different status.
  Act: Compare the two instances using the equals method.
  Assert: Assert that the equals method returns false.
Validation:
  The equals method should return false when comparing objects with different status. This is important to ensure the correct behavior of the equals method.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class LoginButtonStatusGet200ResponseEqualsTest {

	@Test
	@Tag("valid")
	public void validateEqualsMethodWithSameObjects() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("active");
		assertTrue(response.equals(response));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithNullObject() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("active");
		assertFalse(response.equals(null));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithDifferentClassObject() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("active");
		assertFalse(response.equals(new String("active")));
	}

	@Test
	@Tag("valid")
	public void validateEqualsMethodWithSameStatusObjects() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		LoginButtonStatusGet200Response response2 = new LoginButtonStatusGet200Response();
		response1.setStatus("active");
		response2.setStatus("active");
		assertTrue(response1.equals(response2));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsMethodWithDifferentStatusObjects() {
		LoginButtonStatusGet200Response response1 = new LoginButtonStatusGet200Response();
		LoginButtonStatusGet200Response response2 = new LoginButtonStatusGet200Response();
		response1.setStatus("active");
		response2.setStatus("inactive");
		assertFalse(response1.equals(response2));
	}

}