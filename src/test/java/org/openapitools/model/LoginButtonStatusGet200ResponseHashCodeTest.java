
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=hashCode_0d6e508e79
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Scenario 1: Test HashCode with Equal Objects

Details:
  TestName: testHashCodeWithEqualObjects
  Description: This test is meant to check the hashCode method when two objects of LoginButtonStatusGet200Response are equal. The hashCode of equal objects should be the same.
Execution:
  Arrange: Create two instances of LoginButtonStatusGet200Response with the same status value.
  Act: Invoke the hashCode method on both instances.
  Assert: Use JUnit assertions to assert that the hashCodes of both instances are equal.
Validation:
  The assertion verifies that the hashCode method is consistent with the equals method. This is important as it ensures that equal objects have the same hashCode, a requirement for the correct operation of collections that use hashing, like HashMap and HashSet.

Scenario 2: Test HashCode with Unequal Objects

Details:
  TestName: testHashCodeWithUnequalObjects
  Description: This test is meant to check the hashCode method when two objects of LoginButtonStatusGet200Response are not equal. The hashCode of unequal objects can be different.
Execution:
  Arrange: Create two instances of LoginButtonStatusGet200Response with different status values.
  Act: Invoke the hashCode method on both instances.
  Assert: Use JUnit assertions to assert that the hashCodes of both instances are not equal.
Validation:
  The assertion verifies that the hashCode method is working correctly for different objects. This is significant in the context of hash-based collections, where different objects should ideally have different hashCodes to minimize collisions.

Scenario 3: Test HashCode with Null Status

Details:
  TestName: testHashCodeWithNullStatus
  Description: This test is meant to check the hashCode method when the status of the LoginButtonStatusGet200Response object is null. The hashCode method should handle null values without throwing an exception.
Execution:
  Arrange: Create an instance of LoginButtonStatusGet200Response with the status set to null.
  Act: Invoke the hashCode method on the instance.
  Assert: Use JUnit assertions to assert that no exception is thrown.
Validation:
  The assertion verifies that the hashCode method can handle null values. This is important as it ensures the robustness of the method in the face of unexpected input values.
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class LoginButtonStatusGet200ResponseHashCodeTest {

	@Test
	@Tag("valid")
	public void testHashCodeWithEqualObjects() {
		LoginButtonStatusGet200Response instance1 = new LoginButtonStatusGet200Response();
		LoginButtonStatusGet200Response instance2 = new LoginButtonStatusGet200Response();
		instance1.setStatus("Active");
		instance2.setStatus("Active");
		assertEquals(instance1.hashCode(), instance2.hashCode(), "HashCodes of equal objects should be the same");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWithUnequalObjects() {
		LoginButtonStatusGet200Response instance1 = new LoginButtonStatusGet200Response();
		LoginButtonStatusGet200Response instance2 = new LoginButtonStatusGet200Response();
		instance1.setStatus("Active");
		instance2.setStatus("Inactive");
		assertNotEquals(instance1.hashCode(), instance2.hashCode(), "HashCodes of unequal objects should be different");
	}

	@Test
	@Tag("boundary")
	public void testHashCodeWithNullStatus() {
		LoginButtonStatusGet200Response instance = new LoginButtonStatusGet200Response();
		instance.setStatus(null);
		assertDoesNotThrow(instance::hashCode, "hashCode method should not throw an exception when status is null");
	}

}