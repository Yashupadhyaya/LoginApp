
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=hashCode_0d6e508e79
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Scenario 1: Test HashCode with Equal Objects

Details:
  TestName: testHashCodeWithEqualObjects
  Description: This test is meant to check the hashCode method when two objects of LoginButtonStatusGet200Response are equal. According to the Java contract, if two objects are equal, their hash codes must also be equal.
Execution:
  Arrange: Create two LoginButtonStatusGet200Response objects with the same 'status' value.
  Act: Invoke the hashCode method on both objects.
  Assert: Use JUnit assertions to check if the hash codes of both objects are equal.
Validation:
  The assertion verifies that the hash codes of both objects are equal. As per the Java contract, if two objects are equal, their hash codes must also be equal. The test ensures that the hashCode method is implemented correctly and follows the Java contract.

Scenario 2: Test HashCode with Non-Equal Objects

Details:
  TestName: testHashCodeWithNonEqualObjects
  Description: This test is meant to check the hashCode method when two objects of LoginButtonStatusGet200Response are not equal. According to the Java contract, if two objects are not equal, their hash codes should ideally not be equal as well.
Execution:
  Arrange: Create two LoginButtonStatusGet200Response objects with different 'status' values.
  Act: Invoke the hashCode method on both objects.
  Assert: Use JUnit assertions to check if the hash codes of both objects are not equal.
Validation:
  The assertion verifies that the hash codes of both objects are not equal. As per the Java contract, if two objects are not equal, their hash codes should ideally not be equal. This test ensures that the hashCode method is implemented correctly and follows the Java contract.

Scenario 3: Test HashCode with Null Status

Details:
  TestName: testHashCodeWithNullStatus
  Description: This test is meant to check the hashCode method when the 'status' value of LoginButtonStatusGet200Response object is null. The method should handle this case without throwing an exception.
Execution:
  Arrange: Create a LoginButtonStatusGet200Response object with 'status' set to null.
  Act: Invoke the hashCode method on the object.
  Assert: Use JUnit assertions to check if the hash code is returned without any exception.
Validation:
  The assertion verifies that the hashCode method can handle null values without throwing an exception. This test ensures that the method is robust and can handle edge cases.
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

class LoginButtonStatusGet200ResponseHashCodeTest {

	@Test
	@Tag("valid")
	public void testHashCodeWithEqualObjects() {
		LoginButtonStatusGet200Response object1 = new LoginButtonStatusGet200Response();
		object1.setStatus("Active");
		LoginButtonStatusGet200Response object2 = new LoginButtonStatusGet200Response();
		object2.setStatus("Active");
		assertEquals(object1.hashCode(), object2.hashCode(), "HashCodes of equal objects should be same");
	}

	@Test
	@Tag("valid")
	public void testHashCodeWithNonEqualObjects() {
		LoginButtonStatusGet200Response object1 = new LoginButtonStatusGet200Response();
		object1.setStatus("Active");
		LoginButtonStatusGet200Response object2 = new LoginButtonStatusGet200Response();
		object2.setStatus("Inactive");
		assertNotEquals(object1.hashCode(), object2.hashCode(), "HashCodes of non-equal objects should not be same");
	}

	@Test
	@Tag("boundary")
	public void testHashCodeWithNullStatus() {
		LoginButtonStatusGet200Response object = new LoginButtonStatusGet200Response();
		object.setStatus(null);
		assertDoesNotThrow(() -> object.hashCode(), "HashCodes method should not throw exception for null status");
	}

}