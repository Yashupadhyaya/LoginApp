
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=toString_d2b195934d
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
Scenario 1: Test the toString() method when status is null

Details:
  TestName: testToStringWhenStatusIsNull
  Description: This test checks the functionality of the toString() method when the status is null.
Execution:
  Arrange: Instantiate a LoginButtonStatusGet200Response object and do not set a status.
  Act: Invoke the toString() method on the object.
  Assert: Assert that the returned string matches the expected output when status is null.
Validation:
  This assertion verifies that the toString() method handles null values correctly. The expected result is that the status is represented as "null" in the returned string.

Scenario 2: Test the toString() method when status is an empty string

Details:
  TestName: testToStringWhenStatusIsEmpty
  Description: This test checks the functionality of the toString() method when the status is an empty string.
Execution:
  Arrange: Instantiate a LoginButtonStatusGet200Response object and set the status as an empty string.
  Act: Invoke the toString() method on the object.
  Assert: Assert that the returned string matches the expected output when status is an empty string.
Validation:
  This assertion verifies that the toString() method correctly represents an empty status. The expected result is that the status is represented as an empty string in the returned string.

Scenario 3: Test the toString() method when status is a non-empty string

Details:
  TestName: testToStringWhenStatusIsNonEmpty
  Description: This test checks the functionality of the toString() method when the status is a non-empty string.
Execution:
  Arrange: Instantiate a LoginButtonStatusGet200Response object and set the status as a non-empty string.
  Act: Invoke the toString() method on the object.
  Assert: Assert that the returned string matches the expected output when status is a non-empty string.
Validation:
  This assertion verifies that the toString() method correctly represents a non-empty status. The expected result is that the status is represented as the given non-empty string in the returned string.

Scenario 4: Test the toString() method when status has newline characters

Details:
  TestName: testToStringWhenStatusHasNewlineCharacters
  Description: This test checks the functionality of the toString() method when the status contains newline characters.
Execution:
  Arrange: Instantiate a LoginButtonStatusGet200Response object and set the status as a string with newline characters.
  Act: Invoke the toString() method on the object.
  Assert: Assert that the returned string matches the expected output when status contains newline characters.
Validation:
  This assertion verifies that the toString() method correctly handles newline characters in the status. The expected result is that the newline characters are replaced with "\n    " in the returned string.
"""
*/

// ********RoostGPT********

package org.openapitools.model;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import javax.annotation.Generated;

public class LoginButtonStatusGet200ResponseToStringTest {

	@Test
	@Tag("valid")
	public void testToStringWhenStatusIsNull() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus(null);
		String expected = "class LoginButtonStatusGet200Response {\n    status: null\n}";

		assertEquals(expected, response.toString());
	}

	@Test
	@Tag("valid")
	public void testToStringWhenStatusIsEmpty() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("");
		String expected = "class LoginButtonStatusGet200Response {\n    status: \n}";
		assertEquals(expected, response.toString());
	}

	@Test
	@Tag("valid")
	public void testToStringWhenStatusIsNonEmpty() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("active");
		String expected = "class LoginButtonStatusGet200Response {\n    status: active\n}";
		assertEquals(expected, response.toString());
	}

	@Test
	@Tag("valid")
	public void testToStringWhenStatusHasNewlineCharacters() {
		LoginButtonStatusGet200Response response = new LoginButtonStatusGet200Response();
		response.setStatus("active\ninactive");
		String expected = "class LoginButtonStatusGet200Response {\n    status: active\n    inactive\n}";
		assertEquals(expected, response.toString());
	}

}